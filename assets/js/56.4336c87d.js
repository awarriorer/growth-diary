(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{362:function(t,s,a){"use strict";a.r(s);var r=a(14),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"api设计的一些见解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api设计的一些见解"}},[t._v("#")]),t._v(" Api设计的一些见解")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"关于api之rest模式-representational-state-transfer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于api之rest模式-representational-state-transfer"}},[t._v("#")]),t._v(" 关于API之REST模式(REpresentational State Transfer)")]),t._v(" "),s("p",[t._v("REST是什么?REST只是一种API的一种设计模式，一种前后端约定的开发的通用准则。其主要目的是为了实现API的语义话，通俗的讲，当开发人员看到这个API，就能清晰的得知这个API所需要的资源，动作类型，以及服务层返回的状态。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("看url就知道要什么")]),t._v(" "),s("ul",[s("li",[t._v("url定位资源")]),t._v(" "),s("li",[t._v("url中，使用名词表明目的，而不是动词")]),t._v(" "),s("li",[t._v("url中，使用路径参数作为关键性参数，而不是查询参数")]),t._v(" "),s("li",[t._v("根据名称的单数/复数来确定返回，提交/返回是的结果集类型")])])]),t._v(" "),s("li",[s("p",[t._v("看http method就知道干什么(增删改查)")]),t._v(" "),s("ul",[s("li",[t._v("get 获取资源，若是获取列表，建议增加分页查询参数，?start_index=0&count=10")]),t._v(" "),s("li",[t._v("post 创建，更新，")]),t._v(" "),s("li",[t._v("put 更新")]),t._v(" "),s("li",[t._v("delete 删除")])])]),t._v(" "),s("li",[s("p",[t._v("看http status code就知道结果如何")]),t._v(" "),s("ul",[s("li",[s("p",[s("RouterLink",{attrs:{to:"/http/response-status-codes.html"}},[t._v("关于http的状态码")])],1)]),t._v(" "),s("li",[s("p",[t._v("通常情况下，Api返回的数据格式为json格式")])]),t._v(" "),s("li",[s("p",[t._v("通常情况下，api返回的数据类型为")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n        其中status是server返回的处理状态，\n        方案一：0失败,1成功，可能还会有其他状态，内部定义就好\n        方案二：直接用http的状态码来定义该code，\n        个人还是偏向方案一，或者两者结合起来\n    */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("status")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//请求正确的情况下，可以忽略这个值。但是错误状态下，需要返回处理失败的原因")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("msg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[t._v("REST模式的优点")]),t._v(" "),s("ul",[s("li",[t._v("便于前后端分离：前后端分离的大背景下，后端一次开发皆可满足各个端的需求")]),t._v(" "),s("li",[t._v("无状态：客户端的每次请求都需要包含服务端所需要的所有信息")]),t._v(" "),s("li",[t._v("缓存：可缓存的单个请求，减少不必要的交互，提高性能")]),t._v(" "),s("li",[t._v("分层系统：封装服务，引入中间层，限制了系统的复杂性，提高可拓展性")]),t._v(" "),s("li",[t._v("统一性：方便接口的开发和维护")])])])]),t._v(" "),s("h2",{attrs:{id:"关于api之网关设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于api之网关设计"}},[t._v("#")]),t._v(" 关于Api之网关设计")]),t._v(" "),s("p",[t._v("在API的设计之初，应做好API网关的架构管理。以便更好的开发和维护")]),t._v(" "),s("ul",[s("li",[t._v("版本控制：网关统一管理API版本，如*.com/api/v1.0/photos`")]),t._v(" "),s("li",[t._v("兼容处理：API版本原则上向下兼容")]),t._v(" "),s("li",[t._v("自动降级：当找不到v2.0的API时，server可匹配到其对应的低版本API，如v1.8甚至更低")]),t._v(" "),s("li",[t._v("报文包装：网关统一包装返回客户端的code,status，错误信息等报文信息")]),t._v(" "),s("li",[t._v("信息验证：网关统一校验token，权限等公用验证性逻辑")]),t._v(" "),s("li",[t._v("监控警告：可统计API的调用量，错误率，响应时间，调用方式等信息，辅助优化")]),t._v(" "),s("li",[t._v("拓展性：可根据实际业务需求开发更多的中间件，来拓展更多功能")])]),t._v(" "),s("h2",{attrs:{id:"关于api之前端调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于api之前端调用"}},[t._v("#")]),t._v(" 关于API之前端调用")]),t._v(" "),s("p",[t._v("在前端调用方，配置中间层/过滤器来完成对API的监控，比如")]),t._v(" "),s("ul",[s("li",[t._v("封装一个API模块，可对API进行统一封装和管理")]),t._v(" "),s("li",[t._v("若系统存在权限/token认证，可对API模块配置统一的拦截器，统一加入认证参数或者变量")]),t._v(" "),s("li",[t._v("对API返回的报文进行统一过滤，若是没有权限等所需的统一处理，可在拦截器做统一拦截")]),t._v(" "),s("li",[t._v("可控制请求队列(比如：小程序重的请求并发不能大于10)")])])])}),[],!1,null,null,null);s.default=e.exports}}]);